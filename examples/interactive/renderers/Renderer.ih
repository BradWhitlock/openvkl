// ======================================================================== //
// Copyright 2019 Intel Corporation                                         //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "box.ih"
#include "vec.ih"
// openvkl
#include "openvkl/openvkl.isph"

struct Ray
{
  vec3f org;
  vec3f dir;
  float tnear;
  float tfar;
};

struct Renderer
{
  vec3f camPos;
  vec3f dir_00;
  vec3f dir_du;
  vec3f dir_dv;

  vec3f *framebuffer;
  float *accum_r;
  float *accum_g;
  float *accum_b;

  int frameID;

  vec3f (*uniform renderPixel)(uniform Renderer *uniform self,
                               uniform VKLVolume volume,
                               const uniform box3f &volumeBounds,
                               uniform VKLSamplesMask,
                               Ray &ray,
                               const vec2i &pixel,
                               const uniform int &frameID,
                               const uniform int &fbWidth);
};

inline Ray Renderer_computeRay(uniform Renderer *uniform self,
                               const vec2f &screenCoords)
{
  vec3f dir = self->dir_00 + screenCoords.x * self->dir_du +
              screenCoords.y * self->dir_dv;

  Ray ray;

  ray.org   = self->camPos;
  ray.dir   = normalize(dir);
  ray.tnear = 0.f;
  ray.tfar  = inf;

  return ray;
}

inline void intersectBox(const Ray &ray,
                         const uniform box3f &box,
                         float &tnear,
                         float &tfar)
{
  const vec3f mins = (box.lower - ray.org) * rcp_safe(ray.dir);
  const vec3f maxs = (box.upper - ray.org) * rcp_safe(ray.dir);
  tnear            = reduce_max(make_vec4f(min(mins, maxs), ray.tnear));
  tfar             = reduce_min(make_vec4f(max(mins, maxs), ray.tfar));
}
