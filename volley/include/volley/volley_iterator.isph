// ======================================================================== //
// Copyright 2018 Intel Corporation                                         //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "volley_common.isph"
#include "volley_samples_mask.isph"
#include "volley_volume.isph"

#ifdef __cplusplus
extern "C" {
#endif

struct RayIterator;
typedef varying RayIterator *uniform VLYRayIterator;

VLY_API VLYRayIterator
vlyNewRayIterator8(const int *uniform valid,
                   VLYVolume volume,
                   const varying vly_vec3f *uniform origin,
                   const varying vly_vec3f *uniform direction,
                   const varying vly_range1f *uniform tRange,
                   VLYSamplesMask samplesMask);

VLYRayIterator vlyNewRayIteratorV(VLYVolume volume,
                                  const varying vly_vec3f *uniform origin,
                                  const varying vly_vec3f *uniform direction,
                                  const varying vly_range1f *uniform tRange,
                                  VLYSamplesMask samplesMask)
{
  varying bool mask = __mask;
  unmasked
  {
    varying int imask = mask ? -1 : 0;
  }

  if (sizeof(varying float) == 32) {
    return vlyNewRayIterator8((uniform int *uniform) & imask,
                              volume,
                              origin,
                              direction,
                              tRange,
                              NULL);
  }
}

struct VLYRayInterval
{
  vly_range1f tRange;
  float nominalDeltaT;
  // TODO: output samples mask when needed
};

// returns true while the iterator is still within the volume
bool vlyIterateInterval(VLYRayIterator rayIterator,
                        VLYRayInterval *rayInterval);

// returns true while the iterator is still within the volume
bool vlyIterateSurface(VLYRayIterator, float *t, float *sample);

/* TODO:

- need nominalDeltaT to also be returned
- open whether output sample mask is returned
*/

#ifdef __cplusplus
}  // extern "C"
#endif
