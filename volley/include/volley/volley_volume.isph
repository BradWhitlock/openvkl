// ======================================================================== //
// Copyright 2018 Intel Corporation                                         //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#if !defined(VLY_API)
#define VLY_API extern "C" unmasked
#endif

struct vly_vec3f
{
  float x;
  float y;
  float z;
};

struct Volume;
typedef Volume *uniform VLYVolume;

VLY_API void vlyComputeSample8(const int* uniform valid,
                       VLYVolume volume,
                       const varying struct vly_vec3f * uniform objectCoordinates,
                       varying float* uniform samples);


varying float vlyComputeSampleV(VLYVolume volume,
                                const varying vly_vec3f* uniform objectCoordinates) 
{
  print ("\nISPC wrapper\n");

  varying bool mask = __mask;
  unmasked {
    varying int imask = mask ? -1 : 0;
  }
  if (sizeof(varying float) == 32) {
    varying float samples;
    print ("  &imask: %\n", &imask);
    print ("  volume: %\n", volume);
    print ("  objectCoordinates: %\n", objectCoordinates);
    print ("  &samples: %\n", &samples);

    vlyComputeSample8((uniform int* uniform)&imask, volume, objectCoordinates, &samples);

    return samples;
  }
}
