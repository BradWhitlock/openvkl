// ======================================================================== //
// Copyright 2018 Intel Corporation                                         //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "volley_common.isph"

// TODO: should be able to use "Volume" here directly, but this conflicts with
// other ispc:: namespaced OSPRay types
struct VolleyVolume;
typedef VolleyVolume *uniform VLYVolume;

VLY_API void vlyComputeSample8(const int *uniform valid,
                               VLYVolume volume,
                               const varying struct vly_vec3f *uniform
                                   objectCoordinates,
                               varying float *uniform samples);

VLY_FORCEINLINE varying float vlyComputeSampleV(
    VLYVolume volume, const varying vly_vec3f *uniform objectCoordinates)
{
  varying bool mask = __mask;
  unmasked
  {
    varying int imask = mask ? -1 : 0;
  }
  if (sizeof(varying float) == 32) {
    varying float samples;
    vlyComputeSample8(
        (uniform int *uniform) & imask, volume, objectCoordinates, &samples);
    return samples;
  }
}

VLY_API uniform vly_box3f vlyGetBoundingBox(VLYVolume volume);
