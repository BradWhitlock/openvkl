## ======================================================================== ##
## Copyright 2019-2020 Intel Corporation                                    ##
##                                                                          ##
## Licensed under the Apache License, Version 2.0 (the "License");          ##
## you may not use this file except in compliance with the License.         ##
## You may obtain a copy of the License at                                  ##
##                                                                          ##
##     http://www.apache.org/licenses/LICENSE-2.0                           ##
##                                                                          ##
## Unless required by applicable law or agreed to in writing, software      ##
## distributed under the License is distributed on an "AS IS" BASIS,        ##
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. ##
## See the License for the specific language governing permissions and      ##
## limitations under the License.                                           ##
## ======================================================================== ##

variables:
  GIT_DEPTH: "15"
  KW_PROJECT_NAME: openvkl

stages:
  - build
  - test
  - benchmark
  - scan1
  - scan2

## Job Templates ##

.job_template: &base_build_job
  stage: build
  script:
    - gitlab/build.sh -G Ninja -D BUILD_GLFW=OFF
  artifacts:
    paths:
    - build/install
    - build/openvkl/build
  before_script:
    - git submodule sync
    - git submodule init
    - git submodule update

.job_template: &build_job_docker
  <<: *base_build_job
  tags:
    - docker

.job_template: &base_build_from_install_job
  type: test
  script:
    - gitlab/build-from-install.sh

.job_template: &build_from_install_job_docker
  <<: *base_build_from_install_job
  tags:
    - docker

.job_template: &base_functional_test_job
  type: test
  script:
    - ./build/openvkl/build/vklTests # NOTE(jda) - base this on install later

.job_template: &test_functional_job_docker
  <<: *base_functional_test_job
  tags:
    - docker

.job_template: &base_benchmark_job
  type: benchmark
  when: manual
  script:
    - gitlab/run-benchmarks.sh

## Build Jobs ##

build-centos7:
  <<: *build_job_docker
  image: ospray/docker-images:centos7
  script:
  - gitlab/build.sh

build-centos8:
  <<: *build_job_docker
  image: ospray/docker-images:centos8
  script:
  - gitlab/build.sh -G Ninja

build-ubuntu16.04:
  <<: *build_job_docker
  image: ospray/docker-images:ubuntu16.04
  script:
    - gitlab/build.sh -G Ninja

build-ubuntu18.04:
  <<: *build_job_docker
  image: ospray/docker-images:ubuntu18.04

build-arch:
  <<: *build_job_docker
  image: ospray/docker-images:arch

build-arch-clang:
  <<: *build_job_docker
  image: ospray/docker-images:arch
  script:
    - export CC=clang
    - export CXX=clang++
    - gitlab/build.sh -G Ninja -D BUILD_GLFW=OFF

build-macOS:
  <<: *base_build_job
  stage: build
  script:
    - gitlab/build.sh
  tags:
    - osx
    - clang

build-windows-msvc15:
  stage: build
  script:
    - gitlab\build.bat "Visual Studio 15 2017 Win64" "v141"
  tags:
    - msvc15
    - win10
  artifacts:
    paths:
      - build/install
    expire_in: 3 day

## Build From Install Jobs ##

build-from-install-centos7:
  <<: *build_from_install_job_docker
  image: ospray/docker-images:centos7
  dependencies:
    - build-centos7

## Functional Test Jobs ##

test-functional-centos7:
  <<: *test_functional_job_docker
  image: ospray/docker-images:centos7
  dependencies:
    - build-centos7

test-functional-centos8:
  <<: *test_functional_job_docker
  image: ospray/docker-images:centos8
  dependencies:
    - build-centos8

test-functional-ubuntu16.04:
  <<: *test_functional_job_docker
  image: ospray/docker-images:ubuntu16.04
  script:
    - export LD_LIBRARY_PATH=./build/install/lib
    - ./build/openvkl/build/vklTests
  dependencies:
    - build-ubuntu16.04

test-functional-ubuntu18.04:
  <<: *test_functional_job_docker
  image: ospray/docker-images:ubuntu18.04
  script:
    - export LD_LIBRARY_PATH=./build/install/lib
    - ./build/openvkl/build/vklTests
  dependencies:
    - build-ubuntu18.04

test-functional-arch:
  <<: *test_functional_job_docker
  image: ospray/docker-images:arch
  dependencies:
    - build-arch

test-functional-arch-clang:
  <<: *test_functional_job_docker
  image: ospray/docker-images:arch
  dependencies:
    - build-arch-clang

test-functional-macOS:
  <<: *base_functional_test_job
  dependencies:
    - build-macOS
  tags:
    - osx
    - clang
  script:
    - export DYLD_LIBRARY_PATH=./build/install/lib
    - ./build/openvkl/build/vklTests

test-functional-windows-msvc15:
  <<: *base_functional_test_job
  script:
    - gitlab\run_tests.bat
  dependencies:
    - build-windows-msvc15
  tags:
    - msvc15
    - win10

## Benchmark Jobs ##

benchmark-x8280-1:
  <<: *base_benchmark_job
  dependencies:
    - build-centos8
  tags:
    - vis-perf-x8280-1

## KW Jobs ##

build-kw-scan:
  type: scan1
  image: openvkl/openvkl:centos7
  script:
    - gitlab/build-kw-scan.sh
  before_script:
    - git submodule sync
    - git submodule init
    - git submodule update
  tags:
    - kw-scan-docker
  artifacts:
    paths:
        - $CI_PROJECT_DIR/kw_build_number
    expire_in: 1 day
  dependencies: []
  allow_failure: true

test-kw-critical:
  type: scan2
  image: openvkl/openvkl:centos7
  script:
    - gitlab/test-kw-critical.sh
  dependencies:
    - build-kw-scan
  tags:
    - kw-scan-docker
  allow_failure: true

## Protex Job ##

source-protex-scan:
  type: scan1
  image: openvkl/openvkl:centos7
  script:
    - gitlab/source-scan-protex.sh
  tags:
    - docker
  dependencies: []
  allow_failure: true
