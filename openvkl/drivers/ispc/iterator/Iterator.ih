// ======================================================================== //
// Copyright 2009-2019 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "math/box.ih"
#include "../volume/Volume.ih"

// this should match the layout of VKLInterval
struct Interval
{
  varying box1f tRange;
  varying box1f valueRange;
  varying float nominalDeltaT;
};

inline void resetInterval(Interval &interval)
{
  interval.tRange.lower     = 1.f;
  interval.tRange.upper     = -1.f;
  interval.valueRange.lower = 0.f;
  interval.valueRange.upper = 0.f;
  interval.nominalDeltaT    = 0.f;
}

struct Hit
{
  varying float t;
  varying float sample;
};

inline bool intersectSurfaces(const Volume *uniform volume,
                              const varying vec3f &origin,
                              const varying vec3f &direction,
                              const varying box1f &tRange,
                              const uniform float step,
                              const uniform int numValues,
                              const float *uniform values,
                              varying Hit &hit,
                              varying float &surfaceEpsilon)
{
  float t0      = tRange.lower;
  float sample0 = volume->computeSample(volume, origin + t0 * direction);

  float t;

  while (true) {
    t = t0 + step;

    if (t > tRange.upper + step)
      return false;

    const float sample = volume->computeSample(volume, origin + t * direction);

    float tHit    = inf;
    float epsilon = inf;
    float value   = inf;

    if (!isnan(sample0 + sample) && (sample != sample0)) {
      for (uniform int i = 0; i < numValues; i++) {
        if ((values[i] - sample0) * (values[i] - sample) <= 0.f) {
          const float rcpSamp = 1.f / (sample - sample0);
          float tIso          = inf;
          if (!isnan(rcpSamp)) {
            tIso = t0 + (values[i] - sample0) * rcpSamp * (t - t0);
          }

          if (tIso < tHit && tIso >= tRange.lower) {
            tHit    = tIso;
            value   = values[i];
            epsilon = step * 0.125f;
          }
        }
      }

      if (tHit <= tRange.upper) {
        hit.t          = tHit;
        hit.sample     = value;
        surfaceEpsilon = epsilon;
        return true;
      }
    }

    t0      = t;
    sample0 = sample;
  }

  return false;
}