// ======================================================================== //
// Copyright 2009-2019 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "math/box.ih"
#include "math/vec.ih"
#include "openvkl/VKLDataType.h"

struct GridAccelerator;

enum SharedStructuredVolumeGridType
{
  structured_regular
};

struct SharedStructuredVolume
{
  const void *uniform voxelData;
  uniform VKLDataType voxelType;

  uniform vec3i dimensions;

  uniform SharedStructuredVolumeGridType gridType;
  uniform vec3f gridOrigin;
  uniform vec3f gridSpacing;

  uniform box3f boundingBox;

  uniform vec3f localCoordinatesUpperBound;

  GridAccelerator *uniform accelerator;

  // number of bytes for one x/y slice of the data, used to compute offsets for
  // slices with different z values.
  uniform uint64 bytesPerVoxel, bytesPerLine, bytesPerSlice;

  // offsets, in bytes, for one step in x,y,z direction; ONLY valid if
  // bytesPerSlice < 2G.
  varying uint32 voxelOfs_dx;
  varying uint32 voxelOfs_dy;
  varying uint32 voxelOfs_dz;

  void (*uniform transformLocalToObject)(const SharedStructuredVolume *uniform
                                             self,
                                         const varying vec3f &localCoordinates,
                                         varying vec3f &objectCoordinates);

  void (*uniform transformObjectToLocal)(const SharedStructuredVolume *uniform
                                             self,
                                         const varying vec3f &objectCoordinates,
                                         varying vec3f &localCoordinates);

  void (*uniform getVoxel)(const SharedStructuredVolume *uniform self,
                           const varying vec3i &index,
                           varying float &value);

  varying float (*uniform computeSample)(
      const SharedStructuredVolume *uniform self,
      const varying vec3f &objectCoordinates);
};
