// ======================================================================== //
// Copyright 2019 Intel Corporation                                         //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "MinMaxBVH2.ih"
#include "Volume.ih"

typedef enum
{
  VKL_TETRAHEDRON = 10,
  VKL_HEXAHEDRON = 12,
  VKL_WEDGE = 13,
  VKL_PYRAMID = 14
} CellType;

struct VKLUnstructuredVolume
{
  Volume super;

  // vertex data
  const vec3f* uniform vertex;
  const float* uniform vertexValue; // attribute value at each vertex

  // index data
  const uint32* uniform index;      // indices into vertices array
  uniform bool index32Bit;          // true if index is 32-bit integer, false if 64-bit

  // cell data
  const uint32* uniform cell;       // cell offsets in indices array
  uniform bool cell32Bit;           // true if cell offset is 32-bit integer, false if 64-bit
  uniform uint32 cellSkipIds;       // skip indices when index array contain other data e.g. size
  const uint8* uniform cellType;    // cell type array
  const float* uniform cellValue;   // attribute value at each cell

  const vec3f* uniform faceNormals;
  const float* uniform iterativeTolerance;

  uniform box3f boundingBox;

  uniform vec3f gradientStep;

  uniform MinMaxBVH2 bvh;

  uniform bool hexIterative;
};