// Copyright 2019 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "math/vec.ih"
#include "math/box.ih"
#include "Volume.ih"

typedef enum
{
  VKL_TETRAHEDRON = 10,
  VKL_HEXAHEDRON = 12,
  VKL_WEDGE = 13,
  VKL_PYRAMID = 14
} CellType;

struct Node {
  uniform float nominalLength;
  uniform box1f valueRange;
};

struct LeafNode {
  uniform Node super;
  uniform box3fa bounds;
  uniform uint64 cellID;
};

struct InnerNode {
  uniform Node super;
  uniform box3fa bounds[2];
  uniform Node* uniform children[2];
};

struct VKLUnstructuredVolume
{
  Volume super;

  // vertex data
  const vec3f* uniform vertex;
  const float* uniform vertexValue; // attribute value at each vertex

  // index data
  const uint32* uniform index;      // indices into vertices array
  uniform bool index32Bit;          // true if index is 32-bit integer, false if 64-bit

  // cell data
  const uint32* uniform cell;       // cell offsets in indices array
  uniform bool cell32Bit;           // true if cell offset is 32-bit integer, false if 64-bit
  uniform uint32 cellSkipIds;       // skip indices when index array contain other data e.g. size
  const uint8* uniform cellType;    // cell type array
  const float* uniform cellValue;   // attribute value at each cell

  const vec3f* uniform faceNormals;
  const float* uniform iterativeTolerance;

  uniform box3f boundingBox;

  uniform vec3f gradientStep;

  uniform Node* uniform bvhRoot;

  uniform bool hexIterative;
};