// ======================================================================== //
// Copyright 2009-2019 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "../iterator/Iterator.ih"
#include "math/box.ih"
#include "math/vec.ih"

struct GridAcceleratorIterator;
struct SharedStructuredVolume;

struct GridAccelerator
{
  uniform vec3i bricksPerDimension;
  uniform vec3i cellsPerDimension;
  box1f *uniform cellValueRanges;
  SharedStructuredVolume *uniform volume;
};

GridAccelerator *uniform GridAccelerator_Constructor(void *uniform volume);

void GridAccelerator_Destructor(GridAccelerator *uniform accelerator);

bool GridAccelerator_nextCell(const GridAccelerator *uniform accelerator,
                              const GridAcceleratorIterator *uniform iterator,
                              varying vec3i &cellIndex,
                              varying Interval &interval);

void GridAccelerator_getCellValueRange(GridAccelerator *uniform accelerator,
                                       const varying vec3i &cellIndex,
                                       varying box1f &valueRange);
