// ======================================================================== //
// Copyright 2009-2019 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

// ospray
//#include "ospray/common/Ray.ih"
//#include "ospray/geometry/Geometry.ih"
#include "math/vec.ih"
#include "math/box.ih"

/*! BVH node for a MinMaxBVH2 */
struct MinMaxBVH2Node
{
  vec3f bounds_lo;
  float range_lo;
  vec3f bounds_hi;  // spatial bounds
  float range_hi;   // attribute range
  int64 childRef;
};

/*! the base abstraction for a min/max BVH, not yet saying whether
  it's for volumes or isosurfaces, let alone for which type of
  primitive */
struct MinMaxBVH2
{
  int64 rootRef;
  MinMaxBVH2Node *node;
  const int64 *primID;
};

inline bool pointInAABBTest(const uniform MinMaxBVH2Node &box,
                            const vec3f &point)
{
  bool t1 = point.x >= box.bounds_lo.x;
  bool t2 = point.y >= box.bounds_lo.y;
  bool t3 = point.z >= box.bounds_lo.z;
  bool t4 = point.x <= box.bounds_hi.x;
  bool t5 = point.y <= box.bounds_hi.y;
  bool t6 = point.z <= box.bounds_hi.z;
  return t1 & t2 & t3 & t4 & t5 & t6;
}

typedef bool (*intersectAndSamplePrim)(const void *uniform userData,
                                       uniform uint64 id,
                                       float &result,
                                       vec3f samplePos);

void traverse(const uniform MinMaxBVH2 &bvh,
              const void *uniform userPtr,
              uniform intersectAndSamplePrim sampleFunc,
              float &result,
              const vec3f &samplePos);
