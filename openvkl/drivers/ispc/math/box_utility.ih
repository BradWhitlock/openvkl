// ======================================================================== //
// Copyright 2009-2019 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "math/box.ih"
#include "math/vec_utility.ih"

inline varying bool isempty1f(const varying box1f &box)
{
  return box.upper <= box.lower;
}

inline varying bool overlaps1f(const varying box1f &box1,
                               const varying box1f &box2)
{
  return box1.upper >= box2.lower && box1.lower <= box2.upper;
}

inline varying bool overlaps1f(const uniform box1f &box1,
                               const varying box1f &box2)
{
  return box1.upper >= box2.lower && box1.lower <= box2.upper;
}

inline varying box1f intersectBox(const varying vec3f &origin,
                                  const varying vec3f &direction,
                                  const varying box3f &box,
                                  const varying box1f &rangeLimit)
{
  const varying vec3f mins = (box.lower - origin) * divide_safe(direction);
  const varying vec3f maxs = (box.upper - origin) * divide_safe(direction);

  varying box1f result;
  result.lower = reduce_max(make_vec4f(min(mins, maxs), rangeLimit.lower));
  result.upper = reduce_min(make_vec4f(max(mins, maxs), rangeLimit.upper));

  return result;
}

inline varying box1f intersectBox(const varying vec3f &origin,
                                  const varying vec3f &direction,
                                  const uniform box3f &box,
                                  const varying box1f &rangeLimit)
{
  const varying vec3f mins = (box.lower - origin) * divide_safe(direction);
  const varying vec3f maxs = (box.upper - origin) * divide_safe(direction);

  varying box1f result;
  result.lower = reduce_max(make_vec4f(min(mins, maxs), rangeLimit.lower));
  result.upper = reduce_min(make_vec4f(max(mins, maxs), rangeLimit.upper));

  return result;
}
