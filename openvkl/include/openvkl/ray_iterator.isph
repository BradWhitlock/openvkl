// ======================================================================== //
// Copyright 2018 Intel Corporation                                         //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "common.isph"
#include "ray_iterator_size.h"
#include "samples_mask.isph"
#include "volume.isph"

struct VKLRayIterator
{
  const VKLVolume volume;
  int8 internalState[RAY_ITERATOR_INTERNAL_STATE_SIZE];
};

VKL_API uniform VKLRayIterator
vklNewRayIterator4(const int *uniform valid,
                   VKLVolume volume,
                   const varying vkl_vec3f *uniform origin,
                   const varying vkl_vec3f *uniform direction,
                   const varying vkl_range1f *uniform tRange,
                   VKLSamplesMask samplesMask);

VKL_API uniform VKLRayIterator
vklNewRayIterator8(const int *uniform valid,
                   VKLVolume volume,
                   const varying vkl_vec3f *uniform origin,
                   const varying vkl_vec3f *uniform direction,
                   const varying vkl_range1f *uniform tRange,
                   VKLSamplesMask samplesMask);

VKL_API uniform VKLRayIterator
vklNewRayIterator16(const int *uniform valid,
                    VKLVolume volume,
                    const varying vkl_vec3f *uniform origin,
                    const varying vkl_vec3f *uniform direction,
                    const varying vkl_range1f *uniform tRange,
                    VKLSamplesMask samplesMask);

VKL_FORCEINLINE uniform VKLRayIterator
vklNewRayIteratorV(VKLVolume volume,
                   const varying vkl_vec3f *uniform origin,
                   const varying vkl_vec3f *uniform direction,
                   const varying vkl_range1f *uniform tRange,
                   VKLSamplesMask samplesMask)
{
  varying bool mask = __mask;
  unmasked
  {
    varying int imask = mask ? -1 : 0;
  }

  if (sizeof(varying float) == 16) {
    return vklNewRayIterator4((uniform int *uniform) & imask,
                              volume,
                              origin,
                              direction,
                              tRange,
                              samplesMask);
  } else if (sizeof(varying float) == 32) {
    return vklNewRayIterator8((uniform int *uniform) & imask,
                              volume,
                              origin,
                              direction,
                              tRange,
                              samplesMask);
  } else if (sizeof(varying float) == 64) {
    return vklNewRayIterator16((uniform int *uniform) & imask,
                               volume,
                               origin,
                               direction,
                               tRange,
                               samplesMask);
  }
}

struct VKLRayInterval
{
  vkl_range1f tRange;
  float nominalDeltaT;
  // TODO: output samples mask when needed
};

VKL_API void vklIterateInterval4(const int *uniform valid,
                                 VKLRayIterator *uniform rayIterator,
                                 varying VKLRayInterval *uniform rayInterval,
                                 varying int *uniform result);

VKL_API void vklIterateInterval8(const int *uniform valid,
                                 VKLRayIterator *uniform rayIterator,
                                 varying VKLRayInterval *uniform rayInterval,
                                 varying int *uniform result);

VKL_API void vklIterateInterval16(const int *uniform valid,
                                  VKLRayIterator *uniform rayIterator,
                                  varying VKLRayInterval *uniform rayInterval,
                                  varying int *uniform result);

VKL_FORCEINLINE varying bool vklIterateIntervalV(
    VKLRayIterator *uniform rayIterator,
    varying VKLRayInterval *uniform rayInterval)
{
  varying bool mask = __mask;
  unmasked
  {
    varying int imask = mask ? -1 : 0;
  }
  if (sizeof(varying float) == 16) {
    varying int iresult;
    vklIterateInterval4(
        (uniform int *uniform) & imask, rayIterator, rayInterval, &iresult);
    varying bool result = iresult ? true : false;
    return result;
  } else if (sizeof(varying float) == 32) {
    varying int iresult;
    vklIterateInterval8(
        (uniform int *uniform) & imask, rayIterator, rayInterval, &iresult);
    varying bool result = iresult ? true : false;
    return result;
  } else if (sizeof(varying float) == 64) {
    varying int iresult;
    vklIterateInterval16(
        (uniform int *uniform) & imask, rayIterator, rayInterval, &iresult);
    varying bool result = iresult ? true : false;
    return result;
  }
}

struct VKLSurfaceHit
{
  float t;
  float sample;
};

VKL_API void vklIterateSurface4(const int *uniform valid,
                                VKLRayIterator *uniform rayIterator,
                                varying VKLSurfaceHit *uniform surfaceHit,
                                varying int *uniform result);

VKL_API void vklIterateSurface8(const int *uniform valid,
                                VKLRayIterator *uniform rayIterator,
                                varying VKLSurfaceHit *uniform surfaceHit,
                                varying int *uniform result);

VKL_API void vklIterateSurface16(const int *uniform valid,
                                 VKLRayIterator *uniform rayIterator,
                                 varying VKLSurfaceHit *uniform surfaceHit,
                                 varying int *uniform result);

VKL_FORCEINLINE varying bool vklIterateSurfaceV(
    VKLRayIterator *uniform rayIterator,
    varying VKLSurfaceHit *uniform surfaceHit)
{
  varying bool mask = __mask;
  unmasked
  {
    varying int imask = mask ? -1 : 0;
  }
  if (sizeof(varying float) == 16) {
    varying int iresult;
    vklIterateSurface4(
        (uniform int *uniform) & imask, rayIterator, surfaceHit, &iresult);
    varying bool result = iresult ? true : false;
    return result;
  } else if (sizeof(varying float) == 32) {
    varying int iresult;
    vklIterateSurface8(
        (uniform int *uniform) & imask, rayIterator, surfaceHit, &iresult);
    varying bool result = iresult ? true : false;
    return result;
  } else if (sizeof(varying float) == 64) {
    varying int iresult;
    vklIterateSurface16(
        (uniform int *uniform) & imask, rayIterator, surfaceHit, &iresult);
    varying bool result = iresult ? true : false;
    return result;
  }
}
