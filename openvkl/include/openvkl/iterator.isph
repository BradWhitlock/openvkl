// ======================================================================== //
// Copyright 2019 Intel Corporation                                         //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "common.isph"
#include "iterator_size.h"
#include "value_selector.isph"
#include "volume.isph"

///////////////////////////////////////////////////////////////////////////////
// Interval iterators /////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

struct VKLIntervalIterator
{
  // stored as varying int32 to enforce correct alignment
  varying int32 internalState[ITERATOR_INTERNAL_STATE_SIZE_16 / 16 / 4];
  const VKLVolume volume;
};

struct VKLInterval
{
  vkl_range1f tRange;
  vkl_range1f valueRange;
  float nominalDeltaT;
};

VKL_API void vklInitIntervalIterator4(const int *uniform valid,
                                      VKLIntervalIterator *uniform iterator,
                                      VKLVolume volume,
                                      const varying vkl_vec3f *uniform origin,
                                      const varying vkl_vec3f *uniform
                                          direction,
                                      const varying vkl_range1f *uniform tRange,
                                      VKLValueSelector valueSelector);

VKL_API void vklInitIntervalIterator8(const int *uniform valid,
                                      VKLIntervalIterator *uniform iterator,
                                      VKLVolume volume,
                                      const varying vkl_vec3f *uniform origin,
                                      const varying vkl_vec3f *uniform
                                          direction,
                                      const varying vkl_range1f *uniform tRange,
                                      VKLValueSelector valueSelector);

VKL_API void vklInitIntervalIterator16(
    const int *uniform valid,
    VKLIntervalIterator *uniform iterator,
    VKLVolume volume,
    const varying vkl_vec3f *uniform origin,
    const varying vkl_vec3f *uniform direction,
    const varying vkl_range1f *uniform tRange,
    VKLValueSelector valueSelector);

VKL_FORCEINLINE void vklInitIntervalIteratorV(
    VKLIntervalIterator *uniform iterator,
    VKLVolume volume,
    const varying vkl_vec3f *uniform origin,
    const varying vkl_vec3f *uniform direction,
    const varying vkl_range1f *uniform tRange,
    VKLValueSelector valueSelector)
{
  varying bool mask = __mask;
  unmasked
  {
    varying int imask = mask ? -1 : 0;
  }

  if (sizeof(varying float) == 16) {
    vklInitIntervalIterator4((uniform int *uniform) & imask,
                             iterator,
                             volume,
                             origin,
                             direction,
                             tRange,
                             valueSelector);
  } else if (sizeof(varying float) == 32) {
    vklInitIntervalIterator8((uniform int *uniform) & imask,
                             iterator,
                             volume,
                             origin,
                             direction,
                             tRange,
                             valueSelector);
  } else if (sizeof(varying float) == 64) {
    vklInitIntervalIterator16((uniform int *uniform) & imask,
                              iterator,
                              volume,
                              origin,
                              direction,
                              tRange,
                              valueSelector);
  }
}

VKL_API void vklIterateInterval4(const int *uniform valid,
                                 VKLIntervalIterator *uniform iterator,
                                 varying VKLInterval *uniform interval,
                                 varying int *uniform result);

VKL_API void vklIterateInterval8(const int *uniform valid,
                                 VKLIntervalIterator *uniform iterator,
                                 varying VKLInterval *uniform interval,
                                 varying int *uniform result);

VKL_API void vklIterateInterval16(const int *uniform valid,
                                  VKLIntervalIterator *uniform iterator,
                                  varying VKLInterval *uniform interval,
                                  varying int *uniform result);

VKL_FORCEINLINE varying bool vklIterateIntervalV(
    VKLIntervalIterator *uniform iterator,
    varying VKLInterval *uniform interval)
{
  varying bool mask = __mask;
  unmasked
  {
    varying int imask = mask ? -1 : 0;
  }
  if (sizeof(varying float) == 16) {
    varying int iresult;
    vklIterateInterval4(
        (uniform int *uniform) & imask, iterator, interval, &iresult);
    varying bool result = iresult ? true : false;
    return result;
  } else if (sizeof(varying float) == 32) {
    varying int iresult;
    vklIterateInterval8(
        (uniform int *uniform) & imask, iterator, interval, &iresult);
    varying bool result = iresult ? true : false;
    return result;
  } else if (sizeof(varying float) == 64) {
    varying int iresult;
    vklIterateInterval16(
        (uniform int *uniform) & imask, iterator, interval, &iresult);
    varying bool result = iresult ? true : false;
    return result;
  }
}

///////////////////////////////////////////////////////////////////////////////
// Hit iterators //////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

struct VKLHitIterator
{
  // stored as varying int32 to enforce correct alignment
  varying int32 internalState[ITERATOR_INTERNAL_STATE_SIZE_16 / 16 / 4];
  const VKLVolume volume;
};

struct VKLHit
{
  float t;
  float sample;
};

VKL_API void vklInitHitIterator4(const int *uniform valid,
                                 VKLHitIterator *uniform iterator,
                                 VKLVolume volume,
                                 const varying vkl_vec3f *uniform origin,
                                 const varying vkl_vec3f *uniform direction,
                                 const varying vkl_range1f *uniform tRange,
                                 VKLValueSelector valueSelector);

VKL_API void vklInitHitIterator8(const int *uniform valid,
                                 VKLHitIterator *uniform iterator,
                                 VKLVolume volume,
                                 const varying vkl_vec3f *uniform origin,
                                 const varying vkl_vec3f *uniform direction,
                                 const varying vkl_range1f *uniform tRange,
                                 VKLValueSelector valueSelector);

VKL_API void vklInitHitIterator16(const int *uniform valid,
                                  VKLHitIterator *uniform iterator,
                                  VKLVolume volume,
                                  const varying vkl_vec3f *uniform origin,
                                  const varying vkl_vec3f *uniform direction,
                                  const varying vkl_range1f *uniform tRange,
                                  VKLValueSelector valueSelector);

VKL_FORCEINLINE void vklInitHitIteratorV(
    VKLHitIterator *uniform iterator,
    VKLVolume volume,
    const varying vkl_vec3f *uniform origin,
    const varying vkl_vec3f *uniform direction,
    const varying vkl_range1f *uniform tRange,
    VKLValueSelector valueSelector)
{
  varying bool mask = __mask;
  unmasked
  {
    varying int imask = mask ? -1 : 0;
  }

  if (sizeof(varying float) == 16) {
    vklInitHitIterator4((uniform int *uniform) & imask,
                        iterator,
                        volume,
                        origin,
                        direction,
                        tRange,
                        valueSelector);
  } else if (sizeof(varying float) == 32) {
    vklInitHitIterator8((uniform int *uniform) & imask,
                        iterator,
                        volume,
                        origin,
                        direction,
                        tRange,
                        valueSelector);
  } else if (sizeof(varying float) == 64) {
    vklInitHitIterator16((uniform int *uniform) & imask,
                         iterator,
                         volume,
                         origin,
                         direction,
                         tRange,
                         valueSelector);
  }
}

VKL_API void vklIterateHit4(const int *uniform valid,
                            VKLHitIterator *uniform iterator,
                            varying VKLHit *uniform hit,
                            varying int *uniform result);

VKL_API void vklIterateHit8(const int *uniform valid,
                            VKLHitIterator *uniform iterator,
                            varying VKLHit *uniform hit,
                            varying int *uniform result);

VKL_API void vklIterateHit16(const int *uniform valid,
                             VKLHitIterator *uniform iterator,
                             varying VKLHit *uniform hit,
                             varying int *uniform result);

VKL_FORCEINLINE varying bool vklIterateHitV(VKLHitIterator *uniform iterator,
                                            varying VKLHit *uniform hit)
{
  varying bool mask = __mask;
  unmasked
  {
    varying int imask = mask ? -1 : 0;
  }
  if (sizeof(varying float) == 16) {
    varying int iresult;
    vklIterateHit4((uniform int *uniform) & imask, iterator, hit, &iresult);
    varying bool result = iresult ? true : false;
    return result;
  } else if (sizeof(varying float) == 32) {
    varying int iresult;
    vklIterateHit8((uniform int *uniform) & imask, iterator, hit, &iresult);
    varying bool result = iresult ? true : false;
    return result;
  } else if (sizeof(varying float) == 64) {
    varying int iresult;
    vklIterateHit16((uniform int *uniform) & imask, iterator, hit, &iresult);
    varying bool result = iresult ? true : false;
    return result;
  }
}
